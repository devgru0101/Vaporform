apiVersion: v1
kind: Secret
metadata:
  name: vaporform-secrets
  namespace: vaporform-prod
  labels:
    app: vaporform
    tier: security
    environment: production
type: Opaque
stringData:
  # Database credentials (replace with actual values)
  DATABASE_URL: "postgresql://vaporform_user:SECURE_PASSWORD_HERE@postgres:5432/vaporform_prod?sslmode=require"
  DB_PASSWORD: "SECURE_DB_PASSWORD_HERE"
  
  # Redis credentials
  REDIS_URL: "redis://:SECURE_REDIS_PASSWORD@redis:6379"
  REDIS_PASSWORD: "SECURE_REDIS_PASSWORD_HERE"
  
  # JWT secrets
  JWT_SECRET: "SECURE_JWT_SECRET_256_BITS_HERE"
  JWT_REFRESH_SECRET: "SECURE_JWT_REFRESH_SECRET_256_BITS_HERE"
  ENCRYPTION_KEY: "SECURE_ENCRYPTION_KEY_256_BITS_HERE"
  
  # OAuth secrets
  GOOGLE_CLIENT_SECRET: "GOOGLE_OAUTH_CLIENT_SECRET_HERE"
  GITHUB_CLIENT_SECRET: "GITHUB_OAUTH_CLIENT_SECRET_HERE"
  
  # API keys
  OPENAI_API_KEY: "OPENAI_API_KEY_HERE"
  ANTHROPIC_API_KEY: "ANTHROPIC_API_KEY_HERE"
  
  # External service credentials
  STRIPE_SECRET_KEY: "STRIPE_SECRET_KEY_HERE"
  SENDGRID_API_KEY: "SENDGRID_API_KEY_HERE"
  SLACK_WEBHOOK_URL: "SLACK_WEBHOOK_URL_HERE"
  
  # Container registry credentials
  DOCKER_REGISTRY_PASSWORD: "DOCKER_REGISTRY_PASSWORD_HERE"
  
  # Session secrets
  SESSION_SECRET: "SECURE_SESSION_SECRET_256_BITS_HERE"
  COOKIE_SECRET: "SECURE_COOKIE_SECRET_256_BITS_HERE"
  
  # Monitoring secrets
  PROMETHEUS_PASSWORD: "SECURE_PROMETHEUS_PASSWORD_HERE"
  GRAFANA_ADMIN_PASSWORD: "SECURE_GRAFANA_PASSWORD_HERE"
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: vaporform-prod
  labels:
    app: vaporform
    tier: security
    environment: production
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "registry.vaporform.com": {
          "username": "vaporform-deployer",
          "password": "REGISTRY_PASSWORD_HERE",
          "auth": "BASE64_ENCODED_USERNAME_PASSWORD_HERE"
        },
        "ghcr.io": {
          "username": "vaporform-bot",
          "password": "GITHUB_TOKEN_HERE",
          "auth": "BASE64_ENCODED_GITHUB_CREDENTIALS_HERE"
        }
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: vaporform-prod
  labels:
    app: vaporform
    tier: security
    environment: production
type: kubernetes.io/tls
stringData:
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # Replace with actual SSL certificate
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    # Replace with actual private key
    -----END PRIVATE KEY-----
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-credentials
  namespace: vaporform-prod
  labels:
    app: monitoring
    tier: security
    environment: production
type: Opaque
stringData:
  grafana-admin-user: "admin"
  grafana-admin-password: "SECURE_GRAFANA_PASSWORD_HERE"
  prometheus-basic-auth: "admin:HASHED_PROMETHEUS_PASSWORD_HERE"
  jaeger-admin-password: "SECURE_JAEGER_PASSWORD_HERE"
---
apiVersion: v1
kind: Secret
metadata:
  name: backup-credentials
  namespace: vaporform-prod
  labels:
    app: backup
    tier: security
    environment: production
type: Opaque
stringData:
  aws-access-key-id: "AWS_ACCESS_KEY_ID_HERE"
  aws-secret-access-key: "AWS_SECRET_ACCESS_KEY_HERE"
  backup-encryption-key: "BACKUP_ENCRYPTION_KEY_256_BITS_HERE"
  s3-bucket: "vaporform-backups-prod"
  gcs-service-account: |
    {
      "type": "service_account",
      "project_id": "vaporform-prod",
      "private_key_id": "GCS_PRIVATE_KEY_ID_HERE",
      "private_key": "GCS_PRIVATE_KEY_HERE",
      "client_email": "backup@vaporform-prod.iam.gserviceaccount.com",
      "client_id": "GCS_CLIENT_ID_HERE",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token"
    }